-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DFT2d4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Fr_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Fr_ce0 : OUT STD_LOGIC;
    Fr_we0 : OUT STD_LOGIC;
    Fr_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    Fr_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    Fi_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    Fi_ce0 : OUT STD_LOGIC;
    Fi_we0 : OUT STD_LOGIC;
    Fi_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    Fi_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of DFT2d4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DFT2d4,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flvb2104-2-e,HLS_INPUT_CLOCK=3.330000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.137000,HLS_SYN_LAT=476369,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=178,HLS_SYN_FF=22242,HLS_SYN_LUT=20711,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_3FE921FB54442D15 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101001001000011111101101010100010001000010110100010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_260 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal i_cast8_fu_267_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast8_reg_416 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_4_fu_277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_424 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_cast_fu_291_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_reg_429 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast6_cast_fu_295_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast6_cast_reg_434 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_1_fu_305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_1_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_1_reg_450 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_6_cast_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_cast_reg_455 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_339_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_460 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_1_fu_363_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_1_reg_473 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_378_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul_reg_483 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_383_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_reg_488 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_498 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal Fr_load_reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_200_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_200_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_200_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_219_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_219_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_219_ap_done : STD_LOGIC;
    signal ap_block_state26_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_200_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_518 : STD_LOGIC_VECTOR (63 downto 0);
    signal Fi_load_reg_523 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_neg_fu_401_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_neg_reg_528 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_reg_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_200_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_200_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_219_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_219_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_219_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_105 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ai_2_reg_117 : STD_LOGIC_VECTOR (63 downto 0);
    signal ar_2_reg_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_reg_143 : STD_LOGIC_VECTOR (3 downto 0);
    signal ai_3_reg_154 : STD_LOGIC_VECTOR (63 downto 0);
    signal ar_3_reg_166 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_reg_178 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_189 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sin_or_cos_double_s_fu_200_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_219_ap_start_reg : STD_LOGIC := '0';
    signal tmp_7_cast_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_283_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_327_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_339_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_339_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_cast_fu_369_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_cast_fu_353_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_81_to_int_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_s_fu_339_p10 : STD_LOGIC_VECTOR (6 downto 0);

    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DFT2d4_dadd_64ns_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DFT2d4_dmul_64ns_rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DFT2d4_sitodp_32nsc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_sin_or_cos_double_s_fu_200 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_200_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_200_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_200_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_200_ap_ready,
        t_in => reg_260,
        do_cos => grp_sin_or_cos_double_s_fu_200_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_200_ap_return);

    grp_sin_or_cos_double_s_fu_219 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_219_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_219_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_219_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_219_ap_ready,
        t_in => reg_260,
        do_cos => grp_sin_or_cos_double_s_fu_219_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_219_ap_return);

    DFT2d4_dadd_64ns_qcK_U36 : component DFT2d4_dadd_64ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ar_3_reg_166,
        din1 => reg_260,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    DFT2d4_dadd_64ns_qcK_U37 : component DFT2d4_dadd_64ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ai_3_reg_154,
        din1 => tmp_15_reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    DFT2d4_dmul_64ns_rcU_U38 : component DFT2d4_dmul_64ns_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_248_p2);

    DFT2d4_dmul_64ns_rcU_U39 : component DFT2d4_dmul_64ns_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Fi_load_reg_523,
        din1 => grp_fu_253_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    DFT2d4_sitodp_32nsc4_U40 : component DFT2d4_sitodp_32nsc4
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_200_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_200_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_sin_or_cos_double_s_fu_200_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_200_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_200_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_219_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_219_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_sin_or_cos_double_s_fu_219_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_219_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_219_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ai_2_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_299_p2 = ap_const_lv1_0))) then 
                ai_2_reg_117 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_357_p2 = ap_const_lv1_1))) then 
                ai_2_reg_117 <= ai_3_reg_154;
            end if; 
        end if;
    end process;

    ai_3_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_315_p2 = ap_const_lv1_0))) then 
                ai_3_reg_154 <= ai_2_reg_117;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                ai_3_reg_154 <= grp_fu_243_p2;
            end if; 
        end if;
    end process;

    ar_2_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_299_p2 = ap_const_lv1_0))) then 
                ar_2_reg_130 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_357_p2 = ap_const_lv1_1))) then 
                ar_2_reg_130 <= ar_3_reg_166;
            end if; 
        end if;
    end process;

    ar_3_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_315_p2 = ap_const_lv1_0))) then 
                ar_3_reg_166 <= ar_2_reg_130;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                ar_3_reg_166 <= grp_fu_238_p2;
            end if; 
        end if;
    end process;

    i_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_299_p2 = ap_const_lv1_1))) then 
                i_reg_94 <= i_4_reg_424;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_94 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_271_p2 = ap_const_lv1_0))) then 
                j_reg_105 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                j_reg_105 <= j_1_reg_442;
            end if; 
        end if;
    end process;

    p_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_299_p2 = ap_const_lv1_0))) then 
                p_reg_143 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_357_p2 = ap_const_lv1_1))) then 
                p_reg_143 <= p_1_reg_450;
            end if; 
        end if;
    end process;

    phi_mul_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_315_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_189 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                phi_mul_reg_189 <= next_mul_reg_483;
            end if; 
        end if;
    end process;

    q_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_315_p2 = ap_const_lv1_0))) then 
                q_reg_178 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                q_reg_178 <= q_1_reg_473;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then
                Fi_load_reg_523 <= Fi_q0;
                Fr_load_reg_513 <= Fr_q0;
                tmp_81_neg_reg_528 <= tmp_81_neg_fu_401_p2;
                tmp_i_i_reg_518 <= grp_sin_or_cos_double_s_fu_200_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_424 <= i_4_fu_277_p2;
                    i_cast8_reg_416(3 downto 0) <= i_cast8_fu_267_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_442 <= j_1_fu_305_p2;
                    j_cast6_cast_reg_434(3 downto 0) <= j_cast6_cast_fu_295_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_357_p2 = ap_const_lv1_0))) then
                next_mul_reg_483 <= next_mul_fu_378_p2;
                tmp_11_reg_488 <= tmp_11_fu_383_p2;
                tmp_7_reg_478 <= tmp_7_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_1_reg_450 <= p_1_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                q_1_reg_473 <= q_1_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_260 <= grp_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_12_reg_498 <= grp_fu_257_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_15_reg_538 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_271_p2 = ap_const_lv1_0))) then
                    tmp_3_cast_reg_429(6 downto 3) <= tmp_3_cast_fu_291_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_315_p2 = ap_const_lv1_1))) then
                tmp_4_reg_465 <= tmp_4_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_315_p2 = ap_const_lv1_0))) then
                    tmp_6_cast_reg_455(6 downto 3) <= tmp_6_cast_fu_335_p1(6 downto 3);
                tmp_s_reg_460 <= tmp_s_fu_339_p2;
            end if;
        end if;
    end process;
    i_cast8_reg_416(6 downto 4) <= "000";
    tmp_3_cast_reg_429(2 downto 0) <= "000";
    tmp_3_cast_reg_429(7) <= '0';
    j_cast6_cast_reg_434(5 downto 4) <= "00";
    tmp_6_cast_reg_455(2 downto 0) <= "000";
    tmp_6_cast_reg_455(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_271_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond1_fu_315_p2, ap_CS_fsm_state5, exitcond_fu_357_p2, ap_CS_fsm_state26, ap_block_state26_on_subcall_done, exitcond2_fu_299_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_299_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_315_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_357_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Fi_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state51, tmp_7_cast_fu_392_p1, tmp_4_cast_fu_411_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            Fi_address0 <= tmp_4_cast_fu_411_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            Fi_address0 <= tmp_7_cast_fu_392_p1(6 - 1 downto 0);
        else 
            Fi_address0 <= "XXXXXX";
        end if; 
    end process;


    Fi_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            Fi_ce0 <= ap_const_logic_1;
        else 
            Fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Fi_d0 <= ai_2_reg_117;

    Fi_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            Fi_we0 <= ap_const_logic_1;
        else 
            Fi_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Fr_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state51, tmp_7_cast_fu_392_p1, tmp_4_cast_fu_411_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            Fr_address0 <= tmp_4_cast_fu_411_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            Fr_address0 <= tmp_7_cast_fu_392_p1(6 - 1 downto 0);
        else 
            Fr_address0 <= "XXXXXX";
        end if; 
    end process;


    Fr_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            Fr_ce0 <= ap_const_logic_1;
        else 
            Fr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Fr_d0 <= ar_2_reg_130;

    Fr_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            Fr_we0 <= ap_const_logic_1;
        else 
            Fr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state26_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_200_ap_done, grp_sin_or_cos_double_s_fu_219_ap_done)
    begin
                ap_block_state26_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_219_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_200_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_271_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_271_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_271_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_271_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_315_p2 <= "1" when (p_reg_143 = ap_const_lv4_8) else "0";
    exitcond2_fu_299_p2 <= "1" when (j_reg_105 = ap_const_lv4_8) else "0";
    exitcond3_fu_271_p2 <= "1" when (i_reg_94 = ap_const_lv4_8) else "0";
    exitcond_fu_357_p2 <= "1" when (q_reg_178 = ap_const_lv4_8) else "0";

    grp_fu_248_p0_assign_proc : process(tmp_12_reg_498, Fr_load_reg_513, ap_CS_fsm_state27, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_248_p0 <= Fr_load_reg_513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_248_p0 <= tmp_12_reg_498;
        else 
            grp_fu_248_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_p1_assign_proc : process(tmp_i_i_reg_518, ap_CS_fsm_state27, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_248_p1 <= tmp_i_i_reg_518;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_248_p1 <= ap_const_lv64_3FE921FB54442D15;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_253_p1 <= tmp_81_neg_reg_528;
    grp_fu_257_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_488),32));
    grp_sin_or_cos_double_s_fu_200_ap_start <= grp_sin_or_cos_double_s_fu_200_ap_start_reg;
    grp_sin_or_cos_double_s_fu_200_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_double_s_fu_219_ap_start <= grp_sin_or_cos_double_s_fu_219_ap_start_reg;
    grp_sin_or_cos_double_s_fu_219_do_cos <= ap_const_logic_0;
    i_4_fu_277_p2 <= std_logic_vector(unsigned(i_reg_94) + unsigned(ap_const_lv4_1));
    i_cast8_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_94),7));
    j_1_fu_305_p2 <= std_logic_vector(unsigned(j_reg_105) + unsigned(ap_const_lv4_1));
    j_cast6_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_105),6));
    next_mul_fu_378_p2 <= std_logic_vector(unsigned(j_cast6_cast_reg_434) + unsigned(phi_mul_reg_189));
    p_1_fu_321_p2 <= std_logic_vector(unsigned(p_reg_143) + unsigned(ap_const_lv4_1));
    phi_mul_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_189),7));
    q_1_fu_363_p2 <= std_logic_vector(unsigned(q_reg_178) + unsigned(ap_const_lv4_1));
    tmp_11_fu_383_p2 <= std_logic_vector(unsigned(phi_mul_cast_fu_353_p1) + unsigned(tmp_s_reg_460));
    tmp_12_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_reg_178),8));
    tmp_3_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_283_p3),8));
    tmp_4_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_465),64));
    tmp_4_fu_348_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_429) + unsigned(tmp_cast_fu_344_p1));
    tmp_5_fu_327_p3 <= (p_reg_143 & ap_const_lv3_0);
    tmp_6_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_327_p3),8));
    tmp_7_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_478),64));
    tmp_7_fu_373_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_455) + unsigned(tmp_12_cast_fu_369_p1));
    tmp_81_neg_fu_401_p2 <= (tmp_81_to_int_fu_397_p1 xor ap_const_lv64_8000000000000000);
    tmp_81_to_int_fu_397_p1 <= grp_sin_or_cos_double_s_fu_219_ap_return;
    tmp_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_105),8));
    tmp_fu_283_p3 <= (i_reg_94 & ap_const_lv3_0);
    tmp_s_fu_339_p0 <= i_cast8_reg_416(4 - 1 downto 0);
    tmp_s_fu_339_p1 <= tmp_s_fu_339_p10(4 - 1 downto 0);
    tmp_s_fu_339_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_143),7));
    tmp_s_fu_339_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_339_p0) * unsigned(tmp_s_fu_339_p1), 7));
end behav;
